//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1008.
// 
#pragma warning disable 1591

namespace HSRP.org.mptransport.oltp {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HSRPSoap", Namespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx")]
    public partial class HSRP : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetVehicleDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcknowledgeTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOnDemandReferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVehicleDetailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HSRP() {
            this.Url = global::HSRP.Properties.Settings.Default.HSRP_org_mptransport_oltp_HSRP;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetVehicleDetailsCompletedEventHandler GetVehicleDetailsCompleted;
        
        /// <remarks/>
        public event AcknowledgeTokenCompletedEventHandler AcknowledgeTokenCompleted;
        
        /// <remarks/>
        public event GetOnDemandReferenceCompletedEventHandler GetOnDemandReferenceCompleted;
        
        /// <remarks/>
        public event UpdateVehicleDetailCompletedEventHandler UpdateVehicleDetailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://122.168.193.74/TServicesForHSRP/HSRP.aspx/GetVehicleDetails", RequestNamespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx", ResponseNamespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetVehicleDetails(string SecretKey) {
            object[] results = this.Invoke("GetVehicleDetails", new object[] {
                        SecretKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetVehicleDetailsAsync(string SecretKey) {
            this.GetVehicleDetailsAsync(SecretKey, null);
        }
        
        /// <remarks/>
        public void GetVehicleDetailsAsync(string SecretKey, object userState) {
            if ((this.GetVehicleDetailsOperationCompleted == null)) {
                this.GetVehicleDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVehicleDetailsOperationCompleted);
            }
            this.InvokeAsync("GetVehicleDetails", new object[] {
                        SecretKey}, this.GetVehicleDetailsOperationCompleted, userState);
        }
        
        private void OnGetVehicleDetailsOperationCompleted(object arg) {
            if ((this.GetVehicleDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVehicleDetailsCompleted(this, new GetVehicleDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://122.168.193.74/TServicesForHSRP/HSRP.aspx/AcknowledgeToken", RequestNamespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx", ResponseNamespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AcknowledgeToken(string SecretKey, long lngToken) {
            object[] results = this.Invoke("AcknowledgeToken", new object[] {
                        SecretKey,
                        lngToken});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AcknowledgeTokenAsync(string SecretKey, long lngToken) {
            this.AcknowledgeTokenAsync(SecretKey, lngToken, null);
        }
        
        /// <remarks/>
        public void AcknowledgeTokenAsync(string SecretKey, long lngToken, object userState) {
            if ((this.AcknowledgeTokenOperationCompleted == null)) {
                this.AcknowledgeTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcknowledgeTokenOperationCompleted);
            }
            this.InvokeAsync("AcknowledgeToken", new object[] {
                        SecretKey,
                        lngToken}, this.AcknowledgeTokenOperationCompleted, userState);
        }
        
        private void OnAcknowledgeTokenOperationCompleted(object arg) {
            if ((this.AcknowledgeTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcknowledgeTokenCompleted(this, new AcknowledgeTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://122.168.193.74/TServicesForHSRP/HSRP.aspx/GetOnDemandReference", RequestNamespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx", ResponseNamespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOnDemandReference(string SecretKey, string strReference) {
            object[] results = this.Invoke("GetOnDemandReference", new object[] {
                        SecretKey,
                        strReference});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOnDemandReferenceAsync(string SecretKey, string strReference) {
            this.GetOnDemandReferenceAsync(SecretKey, strReference, null);
        }
        
        /// <remarks/>
        public void GetOnDemandReferenceAsync(string SecretKey, string strReference, object userState) {
            if ((this.GetOnDemandReferenceOperationCompleted == null)) {
                this.GetOnDemandReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOnDemandReferenceOperationCompleted);
            }
            this.InvokeAsync("GetOnDemandReference", new object[] {
                        SecretKey,
                        strReference}, this.GetOnDemandReferenceOperationCompleted, userState);
        }
        
        private void OnGetOnDemandReferenceOperationCompleted(object arg) {
            if ((this.GetOnDemandReferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOnDemandReferenceCompleted(this, new GetOnDemandReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://122.168.193.74/TServicesForHSRP/HSRP.aspx/UpdateVehicleDetail", RequestNamespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx", ResponseNamespace="http://122.168.193.74/TServicesForHSRP/HSRP.aspx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateVehicleDetail(string SecretKey, long strHasId, string strRtocode, string strReferenceNo, string strRegnNo, string strEngineNo, string strChassisNo, string strplate, string straffix, string stracknowledge, string strfees, string strAckDate, string strFLaserNo, string strRLaserNo, string strThreeDSticker) {
            object[] results = this.Invoke("UpdateVehicleDetail", new object[] {
                        SecretKey,
                        strHasId,
                        strRtocode,
                        strReferenceNo,
                        strRegnNo,
                        strEngineNo,
                        strChassisNo,
                        strplate,
                        straffix,
                        stracknowledge,
                        strfees,
                        strAckDate,
                        strFLaserNo,
                        strRLaserNo,
                        strThreeDSticker});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVehicleDetailAsync(string SecretKey, long strHasId, string strRtocode, string strReferenceNo, string strRegnNo, string strEngineNo, string strChassisNo, string strplate, string straffix, string stracknowledge, string strfees, string strAckDate, string strFLaserNo, string strRLaserNo, string strThreeDSticker) {
            this.UpdateVehicleDetailAsync(SecretKey, strHasId, strRtocode, strReferenceNo, strRegnNo, strEngineNo, strChassisNo, strplate, straffix, stracknowledge, strfees, strAckDate, strFLaserNo, strRLaserNo, strThreeDSticker, null);
        }
        
        /// <remarks/>
        public void UpdateVehicleDetailAsync(
                    string SecretKey, 
                    long strHasId, 
                    string strRtocode, 
                    string strReferenceNo, 
                    string strRegnNo, 
                    string strEngineNo, 
                    string strChassisNo, 
                    string strplate, 
                    string straffix, 
                    string stracknowledge, 
                    string strfees, 
                    string strAckDate, 
                    string strFLaserNo, 
                    string strRLaserNo, 
                    string strThreeDSticker, 
                    object userState) {
            if ((this.UpdateVehicleDetailOperationCompleted == null)) {
                this.UpdateVehicleDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVehicleDetailOperationCompleted);
            }
            this.InvokeAsync("UpdateVehicleDetail", new object[] {
                        SecretKey,
                        strHasId,
                        strRtocode,
                        strReferenceNo,
                        strRegnNo,
                        strEngineNo,
                        strChassisNo,
                        strplate,
                        straffix,
                        stracknowledge,
                        strfees,
                        strAckDate,
                        strFLaserNo,
                        strRLaserNo,
                        strThreeDSticker}, this.UpdateVehicleDetailOperationCompleted, userState);
        }
        
        private void OnUpdateVehicleDetailOperationCompleted(object arg) {
            if ((this.UpdateVehicleDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVehicleDetailCompleted(this, new UpdateVehicleDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetVehicleDetailsCompletedEventHandler(object sender, GetVehicleDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVehicleDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVehicleDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AcknowledgeTokenCompletedEventHandler(object sender, AcknowledgeTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcknowledgeTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcknowledgeTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOnDemandReferenceCompletedEventHandler(object sender, GetOnDemandReferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOnDemandReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOnDemandReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateVehicleDetailCompletedEventHandler(object sender, UpdateVehicleDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVehicleDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVehicleDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591